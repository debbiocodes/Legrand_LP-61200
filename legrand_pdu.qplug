-- Legrand PDU Control Plugin for Q-SYS
-- Plugin for controlling Legrand PDU outlets and monitoring stats

PluginInfo = {
  Name = "Legrand~PDU Control",
  Version = "1.0",
  Id = "legrand_pdu_control",
  Description = "Control plugin for Legrand PDU with outlet control and monitoring",
  ShowDebug = true
}

-- Plugin properties
function GetProperties()
  props = {
    {
      Name = "IP Address",
      Type = "string",
      Value = "192.168.0.240",
      UserPin = true
    },
    {
      Name = "Port",
      Type = "integer",
      Value = 443,
      Min = 1,
      Max = 65535,
      UserPin = true
    },
    {
      Name = "Username",
      Type = "string",
      Value = "admin",
      UserPin = true
    },
    {
      Name = "Password",
      Type = "string",
      Value = "raritan",
      UserPin = true
    },
    {
      Name = "Number of Outlets",
      Type = "integer",
      Value = 8,
      Min = 1,
      Max = 24,
      UserPin = true
    },
    {
      Name = "Number of Outlet Groups",
      Type = "integer",
      Value = 4,
      Min = 0,
      Max = 8,
      UserPin = true
    }
  }
  
  -- Add outlet name properties
  for i = 0, props[5].Value - 1 do
    table.insert(props, {
      Name = string.format("Outlet %d Name", i),
      Type = "string",
      Value = string.format("Outlet %d", i),
      UserPin = true
    })
  end
  
  -- Add group name properties
  for i = 0, props[6].Value - 1 do
    table.insert(props, {
      Name = string.format("Group %d Name", i),
      Type = "string",
      Value = string.format("Group %d", i),
      UserPin = true
    })
  end
  
  return props
end

-- Plugin controls
function GetControls(props)
  ctls = {}
  
  -- Configuration Controls
  table.insert(ctls, {
    Name = "IP Address",
    ControlType = "Text",
    PinStyle = "Both",
    UserPin = true,
    Count = 1
  })

  table.insert(ctls, {
    Name = "Port",
    ControlType = "Integer",
    PinStyle = "Both",
    UserPin = true,
    Count = 1,
    Min = 1,
    Max = 65535
  })

  table.insert(ctls, {
    Name = "Username",
    ControlType = "Text",
    PinStyle = "Both",
    UserPin = true,
    Count = 1
  })

  table.insert(ctls, {
    Name = "Password",
    ControlType = "Text",
    PinStyle = "Both",
    UserPin = true,
    Count = 1
  })

  table.insert(ctls, {
    Name = "Connect",
    ControlType = "Button",
    ButtonType = "Trigger",
    PinStyle = "Input",
    UserPin = true,
    Count = 1
  })

  table.insert(ctls, {
    Name = "Connection Status",
    ControlType = "Indicator",
    IndicatorType = "Status",
    PinStyle = "Output",
    UserPin = true,
    Count = 1
  })

  -- Add controls for each outlet
  for i = 0, props["Number of Outlets"].Value - 1 do
    -- Outlet Name
    table.insert(ctls, {
      Name = string.format("Outlet %d Name", i),
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    })
    
    -- Outlet Power State
    table.insert(ctls, {
      Name = string.format("Outlet %d Power", i),
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      UserPin = true
    })
    
    -- Outlet Power Cycle
    table.insert(ctls, {
      Name = string.format("Outlet %d Cycle", i),
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "Input",
      UserPin = true
    })
    
    -- Outlet Current
    table.insert(ctls, {
      Name = string.format("Outlet %d Current", i),
      ControlType = "Indicator",
      IndicatorType = "Float",
      PinStyle = "Output",
      UserPin = true
    })
  end
  
  -- Add controls for outlet groups
  for i = 0, props["Number of Outlet Groups"].Value - 1 do
    -- Group Name
    table.insert(ctls, {
      Name = string.format("Group %d Name", i),
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    })
    
    -- Group Power State
    table.insert(ctls, {
      Name = string.format("Group %d Power", i),
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      UserPin = true
    })
    
    -- Group Power Cycle
    table.insert(ctls, {
      Name = string.format("Group %d Cycle", i),
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "Input",
      UserPin = true
    })
  end
  
  -- PDU Monitoring
  table.insert(ctls, {
    Name = "Temperature",
    ControlType = "Indicator",
    IndicatorType = "Float",
    PinStyle = "Output",
    UserPin = true
  })
  
  table.insert(ctls, {
    Name = "Humidity",
    ControlType = "Indicator",
    IndicatorType = "Float",
    PinStyle = "Output",
    UserPin = true
  })
  
  return ctls
end

-- Helper function to make HTTP requests
function SendRequest(method, params, endpoint)
  local ip = Properties["IP Address"].Value
  local port = Properties["Port"].Value
  local username = Properties["Username"].Value
  local password = Properties["Password"].Value
  local url = string.format("https://%s:%s@%s:%d%s", username, password, ip, port, endpoint)
  
  local request = {
    jsonrpc = "2.0",
    method = method,
    params = params,
    id = math.random(1000)
  }
  
  local json = Json.Encode(request)
  local result = HttpClient.Post(url, json, {
    ["Content-Type"] = "application/json",
    ["Accept"] = "application/json"
  })
  
  if result.Status == 200 then
    return Json.Decode(result.Data)
  else
    print(string.format("Error making request: %d", result.Status))
    return nil
  end
end

-- Event Handler
function EventHandler(ctl, evt, data)
  local name = ctl.Name
  
  -- Handle configuration changes
  if name == "Connect" and evt.Type == "Button" then
    Connect()
  elseif name == "IP Address" or name == "Port" or name == "Username" or name == "Password" then
    -- Configuration changed, update status
    Controls["Connection Status"].Value = "Not Connected"
    Controls["Connection Status"].String = "Configuration Changed - Click Connect"
  -- Handle outlet power controls
  elseif name:match("^Outlet %d+ Power$") then
    local outlet = tonumber(name:match("%d+"))
    local endpoint = string.format("/model/pdu/0/outlet/%d", outlet)
    
    if evt.Type == "Boolean" then
      SendRequest("setPowerState", {pstate = data and 1 or 0}, endpoint)
    end
  
  -- Handle outlet power cycle
  elseif name:match("^Outlet %d+ Cycle$") then
    local outlet = tonumber(name:match("%d+"))
    local endpoint = string.format("/model/pdu/0/outlet/%d", outlet)
    
    if evt.Type == "Boolean" and data then
      SendRequest("cyclePowerState", nil, endpoint)
    end
  
  -- Handle group power controls
  elseif name:match("^Group %d+ Power$") then
    local group = tonumber(name:match("%d+"))
    local endpoint = string.format("/model/outletgroup/%d", group)
    
    if evt.Type == "Boolean" then
      SendRequest("setAllOutletPowerStates", {pstate = data and 1 or 0}, endpoint)
    end
  
  -- Handle group power cycle
  elseif name:match("^Group %d+ Cycle$") then
    local group = tonumber(name:match("%d+"))
    local endpoint = string.format("/model/outletgroup/%d", group)
    
    if evt.Type == "Boolean" and data then
      SendRequest("cycleAllOutletPowerStates", nil, endpoint)
    end
  end
end

-- Timer to update measurements
function UpdateMeasurements()
  -- Update outlet currents
  for i = 0, Properties["Number of Outlets"].Value - 1 do
    local result = SendRequest("getMetaData", nil, string.format("/model/pdu/0/outlet/%d/sensor/current", i))
    if result then
      Controls[string.format("Outlet %d Current", i)].Value = result.reading
    end
  end
  
  -- Update temperature and humidity
  local temp_result = SendRequest("getMetaData", nil, "/model/pdu/0/sensor/temperature/0")
  if temp_result then
    Controls["Temperature"].Value = temp_result.reading
  end
  
  local humid_result = SendRequest("getMetaData", nil, "/model/pdu/0/sensor/humidity/0")
  if humid_result then
    Controls["Humidity"].Value = humid_result.reading
  end
end

-- Helper function to check if all required fields are filled
function CanConnect()
  return Controls["IP Address"].String ~= "" and
         Controls["Port"].Value > 0 and
         Controls["Username"].String ~= "" and
         Controls["Password"].String ~= ""
end

-- Connection function
function Connect()
  if not CanConnect() then
    Controls["Connection Status"].Value = 0
    Controls["Connection Status"].String = "Missing Configuration"
    return
  end
  
  -- Test connection
  local result = SendRequest("getMetaData", nil, "/model/pdu/0/sensor/temperature/0")
  if result then
    Controls["Connection Status"].Value = 1
    Controls["Connection Status"].String = "Connected"
    -- Start monitoring
    if measureTimer then measureTimer:Start(5) end
  else
    Controls["Connection Status"].Value = 2
    Controls["Connection Status"].String = "Connection Failed"
  end
end

-- Initialize plugin
function Initialize()
  -- Set initial connection status
  Controls["Connection Status"].Value = 0
  Controls["Connection Status"].String = "Not Connected"
  
  -- Create timer for measurements update
  measureTimer = Timer.New()
  measureTimer.EventHandler = UpdateMeasurements
  
  -- Try to connect if we have saved settings
  if CanConnect() then
    Connect()
  end
end 